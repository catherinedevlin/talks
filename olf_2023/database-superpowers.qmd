---
title: "Database Superpowers"
subtitle: "OLF 2023"
date: "2023-09-08"
author: "Catherine Devlin"
fediverse: "https://github.com/catherinedevlin/talks"
format: 
  revealjs:
    code-line-numbers: false
    code-copy: true
    theme: [solarized, bigger-code.scss] 
footer: "https://github.com/catherinedevlin/talks/"
---


Tools used 

- Quarto
- cog
- Midjourney
- ImageMagick
- Pinta

---

![](img/captain-columbus.png){fig-alt="Captain Columbus" fig-align="center"}

::: {.notes}

- Grant for regional crimefighting
- Digital divide
- FOSS 

:::

## Open-source databases 

- PostgreSQL
- SQLite
- Nine hundred bazillion more 

::: {.notes}

Scope 

I am not the one to tell you the cool things about the others

These are common, but common doesn't mean uncool 

:::

## Introducing [Chelnik](https://twitter.com/ChelnikTravels)

![](img/chelnik.jpg){fig-alt="Small crocheted blue elephant" fig-align="center"}

::: {.notes}

The other databases are cool, but do they have an adorable 
blue elephant?

Capt. C was still skeptical...

:::

---

![](img/chelnik-masked.jpg){fig-alt="Chelnik the PostgreSQL elephant, in superhero mask" fig-align="center"}

# Apologies

![](img/chaos.png){fig-alt="Chaotic comic scene" fig-align="center"}

::: {.notes}

Mishmash, no thematic consistency 

Whirlwind, eclectic tour: Demos and brief shout-outs

:::

# Outline 

- Shape of data
- Pandas / Jupyter
- Plain SQL 
- Advanced SQL
- SQLite
  - simple != weak
  - datasette

----

![](img/postgresql-homepage.png){fig-alt="PostgreSQL homepage" fig-align="center"}

::: {.notes}

Classic database server 

Complete and powerful

:::

-----

![](img/sqlite-homepage.png){fig-alt="SQLite homepage" fig-align="center"}

::: {.notes}

Lightweight, basic (but efficient) database server 

:::

-----

            PostgreSQL   SQLite
  --------- ------------ -------------
            server       library
  watchword powerful     lightweight
  SQL       compliant    incomplete
  Readers   many         many
  Writers   many         one

# Seating amnesty break

# The Mighty Rectangle

![](img/spreadsheet.png){fig-alt="spreadsheet" fig-align="center"}

::: {.notes}

Ubiquitious, easy, and flawed 

Power 1, Power 2, ...

Power 4?

Which col to search?

:::


## Relationships



```{ sql }
select * from powers;

select * from supers;

```

::: { .notes }
00-foreign-keys.sql
:::



## Join




```{ sql }
select
    s.name,
    s.tagline,
    p.name as power
from supers s
join powers p on (p.super_id = s.id)
order by s.id;

```

::: { .notes }
01-join.sql


Well now you've got a rectangle again.  But at least it isn't stored this way.

:::

## View



```{ sql }
CREATE OR REPLACE VIEW supers_w_powers AS
SELECT
    s.name,
    s.tagline,
    p.name AS power
FROM supers s
JOIN powers p ON (p.super_id = s.id)
ORDER BY s.id;

```

::: { .notes }
02-view.sql
:::



--------------



```{ sql }
SELECT *
FROM supers_w_powers
WHERE tagline IS NOT NULL;

```

::: { .notes }
03-use_view.sql
:::




## Materialized view



```{ sql }
CREATE MATERIALIZED VIEW supers_w_powers_mv AS
SELECT *
FROM supers_w_powers;
REFRESH MATERIALIZED VIEW supers_w_powers_mv;
CREATE INDEX ON supers_w_powers_mv (name);

SELECT *
FROM supers_w_powers_mv
WHERE name LIKE 'Captain%';

```

::: { .notes }
04-matview.sql
:::



(not SQLite)

## Many-to-many 



```{ sql }
SELECT
    name,
    power
FROM supers_w_powers
WHERE
    power LIKE '%speed%'
    OR power LIKE '%strength%'
    OR power LIKE '%flight%'
ORDER BY power, name;

```

::: { .notes }
05-many-to-many-problem.sql


Store powers more than once

- storage 
- discrepancy 
- single power - all 

:::

---



```{ sql }
SELECT * FROM powers_mtm;

```

::: { .notes }
06-display_powers_mtm.sql
:::





```{ sql }
SELECT * FROM super_to_power;

```

::: { .notes }
07-display_super_to_power.sql
:::



```{dot}
digraph P {
    layout=dot
    "supers" -> "super_to_power_mtm"
    "powers_mtm" -> "super_to_power_mtm"
}
```

::: {.notes}

Relationship not to each other, but to a 

join table, bridging table

:::

------



```{ sql }
SELECT
    s.id,
    s.name,
    s.tagline,
    p.name
FROM supers s
JOIN super_to_power sp ON (sp.super_id = s.id)
JOIN powers_mtm p ON (sp.power_id = p.id)
ORDER BY s.id, p.id;

```

::: { .notes }
08-many-to-many-query.sql


This can also be wrapped in a view.

:::

# Other shapes

![](img/thinker.jpg){fig-alt="The Thinker, sculpture at Cleveland Museum of Art" fig-align="center"}

::: {.notes}

Relational *can* model anything, but maybe not always ideal 

Thinker sends us data about superhero battles

JSON format

::: 

## Documents

    [{'issue': 1,
    'venue': 'Air Force museum',
    'sides': {'villains': {'objective': 'Steal B-52',
        'success': False,
        'participants': {'Orville Wrong': {'consequences': {'captured': False,
        'injuries': ['black eye']}},
        'Wilbur Wrong': {'consequences': {'captured': False}}}},
    'heroes': {'participants': {'Captain Columbus': {'consequences': []},
        'Cardinal Virtue': {'consequences': ['sprained wing',
        'ruffled feathers']}}},
    'property loss': ['B-52 damaged', 'SPAD VII stolen']}},
    {'issue': 2,
    'venue': 'Purple People Bridge',
    'sides': {'heroes': {'objective': "learn villains' plans",
        'success': True,
        'participants': {'Ohio Gosaimasu': {'consequences': {'captured': True}}}},
    'villains': {'objective': 'capture hero',
        'success': True,
        'participants': {'Nell Strongarm': {'consequences': []},
        'Henry Fnord': {'consequences': []}}},
    'property loss': ['Segway thrown into river']}}]

::: {.notes}

- Hard to model as related tables 
- Tons of joins - awkward and slow

:::

## Store in PostgreSQL



```{ sql }
DROP TABLE IF EXISTS battles CASCADE;
create table battles (id serial primary key, battle jsonb);
insert into battles (battle)
values ('
{
  "issue": 1,
  "venue": "Air Force museum",
  "sides": {
    "villains": {
      "objective": "Steal B-52",
      "success": false,
      "participants": {
        "Orville Wrong": {
          "consequences": {
            "captured": false,
            "injuries": [
              "black eye"
            ]
          }
        },
        "Wilbur Wrong": {
          "consequences": {
            "captured": false
          }
        }
      }
    },
    "heroes": {
      "participants": {
        "Captain Columbus": {
          "consequences": []
        },
        "Cardinal Virtue": {
          "consequences": [
            "sprained wing",
            "ruffled feathers"
          ]
        }
      }
    },
    "property loss": [
      "B-52 damaged",
      "SPAD VII stolen"
    ]
  }
}'
  ),
  ('
{
  "issue": 2,
  "venue": "Purple People Bridge",
  "sides": {
    "heroes": {
      "objective": "learn villains'' plans",
      "success": true,
      "participants": {
        "Ohio Gosaimasu": {
          "consequences": {
            "captured": true
          }
        }
      }
    },
    "villains": {
      "objective": "capture hero",
      "success": true,
      "participants": {
        "Nell Strongarm": {
          "consequences": []
        },
        "Henry Fnord": {
          "consequences": []
        }
      }
    },
    "property loss": [
      "Segway thrown into Ohio river"
    ]
  }
}'
  );
```

::: { .notes }
09-doc-in-pg.sql


Stuck a SQL string into a text field?

:::


## Query



```{ sql }
select
    battle -> 'venue' as venue,
    battle -> 'sides' -> 'villains' -> 'participants' as villains,
    battle -> 'property loss'
from battles
where battle -> 'sides' -> 'villains' ->> 'success' = 'false';

```

::: { .notes }
10-json-query.sql
:::



jq-like [jsonpath: SQL/JSON](https://github.com/obartunov/sqljsondoc/blob/master/jsonpath.md)

## Index



```{ sql }
CREATE INDEX ON battles ((battle ->> 'venue'));

```

::: { .notes }
11-json-index.sql
:::



## Other document options

## Document database 



```{ sh }
mongosh mongodb://$PGUSER:$PGPASSWORD@127.0.0.1/ferretdb?authMechanism=PLAIN

```

::: { .notes }
12-mongo-connect.sh
:::





```{ js }
db.battles.find({venue: 'Air Force museum'})
```

::: { .notes }
13-battles.js


You like the MongoDB API, Mongo query-by-example 

:::

------

![](img/ferretdb.png){fig-alt="FerretDB: document database hosted on PostgreSQL" fig-align="center"}

::: {.notes}

Surprise!

:::

------

## FerretDB: hosted on PostgreSQL

    $ sudo apt-get install ferretdb
    $ ferretdb --postgresql-url=postgres://$PGUSER:$PGPASSWORD@localhost:$PGPORT/$PGDATABASE


## FerretDB on SQLite 

![](img/ferretdb-on-sqlite.png){fig-alt="FerretDB on SQLite" fig-align="center"}

## Foreign Data Wrapper

![](img/mongo_fdw_gh.png){fig-alt="mongo_fdw GitHub page" fig-align="center"}

-------


## Graphs

```{dot}
digraph P {
    layout=dot
    "node 0" -> "node 2" [label = "edge"]
    "node 0" -> "node 3" [label = "edge"]
    "node 1" -> "node 4" [label = "edge"]
    "node 1" -> "node 5" [label = "edge"]
    "node 0" -> "node 4" [label = "edge"]
    "node 3" -> "node 4" [label = "edge"]
}
```

-------

![Henry Fnord](img/fnord.png){fig-alt="Henry Fnord" fig-align="center"}

--------

![Wrong Brothers, the Fiends of Flight](img/wrong-brothers.png){fig-alt="Wrong Brothers" fig-align="center"}

--------

![Nell Strongarm, Astro-Thug from Wapakoneta](img/nell-strongarm2.png){fig-alt="Nell Strongarm" fig-align="center"}

--------

![](img/innovators.png){fig-alt="Innovators of Iniquity" fig-align="center"}

------




```{ sql }
SELECT * FROM group_or_member;

```

::: { .notes }
14-group_or_member.sql


Models the nesting

But each row can be a super, or not - awkward 

:::

------



```{ sql }
SELECT s.*
FROM group_or_member i
JOIN group_or_member i_mem
    ON (i_mem.belongs_to = i.id)
LEFT JOIN group_or_member i_subgrp_mem
    ON (i_subgrp_mem.belongs_to = i_mem.id)
JOIN supers s
    ON (
        s.id = i_mem.super_id
        OR s.id = i_subgrp_mem.super_id
    )
WHERE i.name = 'Innovators of Iniquity';

```

::: { .notes }
15-innovators-rel.sql


What if it were nested more deeply?

What if it were arbitrarily nested?

:::

## Recursive CTE 

[Using PostgreSQL as a graph database](https://tech.ingrid.com/sql-as-graph-database/) by Krzysztof Dryś 


## [Recursive CTE in SQLite](https://www.sqlite.org/lang_with.html)

![](img/recursive-sqlite.png){fig-alt="Recursive CTE in SQLite" fig-align="center"}


## [Apache AGE](https://age.apache.org/)

Learn Cyper from [Neo4j](https://neo4j.com/developer/cypher/)

![](img/apache_age.png){fig-alt="Apache AGE webpage" fig-align="center"}

## Define graph



```{ sql }
load 'age';
SET search_path = ag_catalog, "$user", public;
select drop_graph('knowledge', true);
select create_graph('knowledge');

SELECT * FROM  
cypher('knowledge', $$
  CREATE (s:Super { name: "The Trilobite", align: NULL, 
          tagline: "Caped Cambrian", based_in: "Silvania" } )
 $$) AS (result1 agtype);



SELECT * FROM  
cypher('knowledge', $$
  CREATE (s:Super { name: "Putin Bae", align: "villain", 
          tagline: "Rasslin’ Russophile", based_in: "Mansfield" } )
 $$) AS (result1 agtype);



SELECT * FROM  
cypher('knowledge', $$
  CREATE (s:Super { name: "Cardinal Virtue", align: "hero", 
          tagline: "Redbird of Righteousness", based_in: "Cincinnati" } )
 $$) AS (result1 agtype);



SELECT * FROM  
cypher('knowledge', $$
  CREATE (s:Super { name: "Orville Wrong", align: "villain", 
          tagline: "Fiend of Flight", based_in: "Dayton" } )
 $$) AS (result1 agtype);



SELECT * FROM  
cypher('knowledge', $$
  CREATE (s:Super { name: "Wilbur Wrong", align: "villain", 
          tagline: "Fiend of Flight", based_in: "Dayton" } )
 $$) AS (result1 agtype);



SELECT * FROM  
cypher('knowledge', $$
  CREATE (s:Super { name: "Henry Fnord", align: "villain", 
          tagline: "Mass-Producer of Mayhem", based_in: "Dearborn" } )
 $$) AS (result1 agtype);



SELECT * FROM  
cypher('knowledge', $$
  CREATE (s:Super { name: "Nell Strongarm", align: "villain", 
          tagline: "Astro-Thug", based_in: "Wapokoneta" } )
 $$) AS (result1 agtype);



SELECT * FROM  
cypher('knowledge', $$
  CREATE (s:Super { name: "The Thinker", align: "hero", 
          tagline: "None", based_in: "Cleveland" } )
 $$) AS (result1 agtype);



SELECT * FROM  
cypher('knowledge', $$
  CREATE (s:Super { name: "Blue Jacket", align: "hero", 
          tagline: "None", based_in: "Chillicothe" } )
 $$) AS (result1 agtype);



SELECT * FROM  
cypher('knowledge', $$
  CREATE (s:Super { name: "Captain Columbus", align: "hero", 
          tagline: "Protector of Ohio", based_in: "Columbus" } )
 $$) AS (result1 agtype);



SELECT * FROM  
cypher('knowledge', $$
  CREATE (s:Super { name: "Buckeye Bullet", align: "hero", 
          tagline: "None", based_in: "Cleveland" } )
 $$) AS (result1 agtype);



SELECT * FROM  
cypher('knowledge', $$
  CREATE (s:Super { name: "Annie Oakley", align: "hero", 
          tagline: "Little Miss Sure Shot", based_in: "Greenville" } )
 $$) AS (result1 agtype);



SELECT * FROM  
cypher('knowledge', $$
  CREATE (s:Super { name: "The Stealer", align: "villain", 
          tagline: "None", based_in: "Pittsburgh" } )
 $$) AS (result1 agtype);



SELECT * FROM  
cypher('knowledge', $$
  CREATE (s:Super { name: "Ohio Gosaimasu", align: "hero", 
          tagline: "Sandusky Samurai", based_in: "Sandusky" } )
 $$) AS (result1 agtype);



SELECT * FROM  
cypher('knowledge', $$
  CREATE (s:Super { name: "The Hawk King", align: "hero", 
          tagline: "None", based_in: "Hocking Hills" } )
 $$) AS (result1 agtype);



SELECT * FROM  
cypher('knowledge', $$
  CREATE (s:Super { name: "Airship Alice", align: "villain", 
          tagline: "None", based_in: "Akron" } )
 $$) AS (result1 agtype);



SELECT * FROM  
cypher('knowledge', $$
  CREATE (s:Super { name: "Motown Menace", align: "villain", 
          tagline: "None", based_in: "Detroit" } )
 $$) AS (result1 agtype);



SELECT * FROM  
cypher('knowledge', $$
  CREATE (s:Super { name: "Captain Cuyahoga", align: "villain", 
          tagline: "Fire and Water Do Mix", based_in: "Cleveland" } )
 $$) AS (result1 agtype);



SELECT * FROM  
cypher('knowledge', $$
  CREATE (s:Super { name: "Indian Jane", align: "hero", 
          tagline: "Nazi-punching archaeologist", based_in: "Bloomington" } )
 $$) AS (result1 agtype);



SELECT * FROM  
cypher('knowledge', $$
  CREATE (s:Super { name: "Defiance Dogman", align: "villain", 
          tagline: "None", based_in: "Defiance" } )
 $$) AS (result1 agtype);



SELECT * FROM  
cypher('knowledge', $$
  CREATE (s:Super { name: "Loveland Frogman", align: NULL, 
          tagline: "None", based_in: "Loveland" } )
 $$) AS (result1 agtype);



SELECT * FROM  
cypher('knowledge', $$
  CREATE (s:Super { name: "Marvelous Mudhen", align: "hero", 
          tagline: "None", based_in: "Toledo" } )
 $$) AS (result1 agtype);



SELECT * FROM  
cypher('knowledge', $$
  CREATE (s:Super { name: "Mad Miller", align: NULL, 
          tagline: "None", based_in: "Milan" } )
 $$) AS (result1 agtype);



SELECT * FROM  
cypher('knowledge', $$
  MATCH (s1:Super { name: "Orville Wrong" })
  MATCH (s2:Super { name: "Airship Alice" })
  CREATE (s1)-[:ALLIED_WITH]->(s2)
 $$) AS (result1 agtype);



SELECT * FROM  
cypher('knowledge', $$
  MATCH (s1:Super { name: "Cardinal Virtue" })
  MATCH (s2:Super { name: "Airship Alice" })
  CREATE (s1)-[:FOUGHT]->(s2)
 $$) AS (result1 agtype);



SELECT * FROM  
cypher('knowledge', $$
  MATCH (s1:Super { name: "The Hawk King" })
  MATCH (s2:Super { name: "Buckeye Bullet" })
  CREATE (s1)-[:ALLIED_WITH]->(s2)
 $$) AS (result1 agtype);



SELECT * FROM  
cypher('knowledge', $$
  MATCH (s1:Super { name: "Ohio Gosaimasu" })
  MATCH (s2:Super { name: "Buckeye Bullet" })
  CREATE (s1)-[:ALLIED_WITH]->(s2)
 $$) AS (result1 agtype);



SELECT * FROM  
cypher('knowledge', $$
  MATCH (s1:Super { name: "Ohio Gosaimasu" })
  MATCH (s2:Super { name: "Cardinal Virtue" })
  CREATE (s1)-[:ALLIED_WITH]->(s2)
 $$) AS (result1 agtype);



SELECT * FROM  
cypher('knowledge', $$
  MATCH (s1:Super { name: "Captain Columbus" })
  MATCH (s2:Super { name: "Cardinal Virtue" })
  CREATE (s1)-[:ALLIED_WITH]->(s2)
 $$) AS (result1 agtype);



SELECT * FROM  
cypher('knowledge', $$
  MATCH (s1:Super { name: "Annie Oakley" })
  MATCH (s2:Super { name: "Cardinal Virtue" })
  CREATE (s1)-[:ALLIED_WITH]->(s2)
 $$) AS (result1 agtype);



SELECT * FROM  
cypher('knowledge', $$
  MATCH (s1:Super { name: "The Thinker" })
  MATCH (s2:Super { name: "Defiance Dogman" })
  CREATE (s1)-[:FOUGHT]->(s2)
 $$) AS (result1 agtype);



SELECT * FROM  
cypher('knowledge', $$
  MATCH (s1:Super { name: "Captain Columbus" })
  MATCH (s2:Super { name: "Defiance Dogman" })
  CREATE (s1)-[:FOUGHT]->(s2)
 $$) AS (result1 agtype);



SELECT * FROM  
cypher('knowledge', $$
  MATCH (s1:Super { name: "Putin Bae" })
  MATCH (s2:Super { name: "Defiance Dogman" })
  CREATE (s1)-[:ALLIED_WITH]->(s2)
 $$) AS (result1 agtype);



SELECT * FROM  
cypher('knowledge', $$
  MATCH (s1:Super { name: "Cardinal Virtue" })
  MATCH (s2:Super { name: "Henry Fnord" })
  CREATE (s1)-[:FOUGHT]->(s2)
 $$) AS (result1 agtype);



SELECT * FROM  
cypher('knowledge', $$
  MATCH (s1:Super { name: "Captain Columbus" })
  MATCH (s2:Super { name: "Henry Fnord" })
  CREATE (s1)-[:FOUGHT]->(s2)
 $$) AS (result1 agtype);



SELECT * FROM  
cypher('knowledge', $$
  MATCH (s1:Super { name: "Annie Oakley" })
  MATCH (s2:Super { name: "Henry Fnord" })
  CREATE (s1)-[:FOUGHT]->(s2)
 $$) AS (result1 agtype);



SELECT * FROM  
cypher('knowledge', $$
  MATCH (s1:Super { name: "Ohio Gosaimasu" })
  MATCH (s2:Super { name: "Henry Fnord" })
  CREATE (s1)-[:FOUGHT]->(s2)
 $$) AS (result1 agtype);



SELECT * FROM  
cypher('knowledge', $$
  MATCH (s1:Super { name: "Cardinal Virtue" })
  MATCH (s2:Super { name: "Henry Fnord" })
  CREATE (s1)-[:FOUGHT]->(s2)
 $$) AS (result1 agtype);



SELECT * FROM  
cypher('knowledge', $$
  MATCH (s1:Super { name: "Buckeye Bullet" })
  MATCH (s2:Super { name: "Motown Menace" })
  CREATE (s1)-[:FOUGHT]->(s2)
 $$) AS (result1 agtype);



SELECT * FROM  
cypher('knowledge', $$
  MATCH (s1:Super { name: "The Hawk King" })
  MATCH (s2:Super { name: "Motown Menace" })
  CREATE (s1)-[:FOUGHT]->(s2)
 $$) AS (result1 agtype);



SELECT * FROM  
cypher('knowledge', $$
  MATCH (s1:Super { name: "Cardinal Virtue" })
  MATCH (s2:Super { name: "Nell Strongarm" })
  CREATE (s1)-[:FOUGHT]->(s2)
 $$) AS (result1 agtype);



SELECT * FROM  
cypher('knowledge', $$
  MATCH (s1:Super { name: "Annie Oakley" })
  MATCH (s2:Super { name: "Nell Strongarm" })
  CREATE (s1)-[:FOUGHT]->(s2)
 $$) AS (result1 agtype);



SELECT * FROM  
cypher('knowledge', $$
  MATCH (s1:Super { name: "Henry Fnord" })
  MATCH (s2:Super { name: "Nell Strongarm" })
  CREATE (s1)-[:ALLIED_WITH]->(s2)
 $$) AS (result1 agtype);



SELECT * FROM  
cypher('knowledge', $$
  MATCH (s1:Super { name: "Putin Bae" })
  MATCH (s2:Super { name: "Ohio Gosaimasu" })
  CREATE (s1)-[:FOUGHT]->(s2)
 $$) AS (result1 agtype);



SELECT * FROM  
cypher('knowledge', $$
  MATCH (s1:Super { name: "The Hawk King" })
  MATCH (s2:Super { name: "Ohio Gosaimasu" })
  CREATE (s1)-[:ALLIED_WITH]->(s2)
 $$) AS (result1 agtype);



SELECT * FROM  
cypher('knowledge', $$
  MATCH (s1:Super { name: "Defiance Dogman" })
  MATCH (s2:Super { name: "Ohio Gosaimasu" })
  CREATE (s1)-[:FOUGHT]->(s2)
 $$) AS (result1 agtype);



SELECT * FROM  
cypher('knowledge', $$
  MATCH (s1:Super { name: "Cardinal Virtue" })
  MATCH (s2:Super { name: "Orville Wrong" })
  CREATE (s1)-[:FOUGHT]->(s2)
 $$) AS (result1 agtype);



SELECT * FROM  
cypher('knowledge', $$
  MATCH (s1:Super { name: "Cardinal Virtue" })
  MATCH (s2:Super { name: "Putin Bae" })
  CREATE (s1)-[:FOUGHT]->(s2)
 $$) AS (result1 agtype);



SELECT * FROM  
cypher('knowledge', $$
  MATCH (s1:Super { name: "Captain Columbus" })
  MATCH (s2:Super { name: "Putin Bae" })
  CREATE (s1)-[:FOUGHT]->(s2)
 $$) AS (result1 agtype);



SELECT * FROM  
cypher('knowledge', $$
  MATCH (s1:Super { name: "Defiance Dogman" })
  MATCH (s2:Super { name: "The Hawk King" })
  CREATE (s1)-[:FOUGHT]->(s2)
 $$) AS (result1 agtype);



SELECT * FROM  
cypher('knowledge', $$
  MATCH (s1:Super { name: "Putin Bae" })
  MATCH (s2:Super { name: "The Hawk King" })
  CREATE (s1)-[:FOUGHT]->(s2)
 $$) AS (result1 agtype);



SELECT * FROM  
cypher('knowledge', $$
  MATCH (s1:Super { name: "Ohio Gosaimasu" })
  MATCH (s2:Super { name: "The Stealer" })
  CREATE (s1)-[:FOUGHT]->(s2)
 $$) AS (result1 agtype);



SELECT * FROM  
cypher('knowledge', $$
  MATCH (s1:Super { name: "Buckeye Bullet" })
  MATCH (s2:Super { name: "The Stealer" })
  CREATE (s1)-[:FOUGHT]->(s2)
 $$) AS (result1 agtype);



SELECT * FROM  
cypher('knowledge', $$
  MATCH (s1:Super { name: "Captain Columbus" })
  MATCH (s2:Super { name: "The Thinker" })
  CREATE (s1)-[:ALLIED_WITH]->(s2)
 $$) AS (result1 agtype);



SELECT * FROM  
cypher('knowledge', $$
  MATCH (s1:Super { name: "Captain Columbus" })
  MATCH (s2:Super { name: "The Trilobite" })
  CREATE (s1)-[:FOUGHT]->(s2)
 $$) AS (result1 agtype);



SELECT * FROM  
cypher('knowledge', $$
  MATCH (s1:Super { name: "Orville Wrong" })
  MATCH (s2:Super { name: "Wilbur Wrong" })
  CREATE (s1)-[:ALLIED_WITH]->(s2)
 $$) AS (result1 agtype);



SELECT * FROM  
cypher('knowledge', $$
  MATCH (s1:Super { name: "Cardinal Virtue" })
  MATCH (s2:Super { name: "Wilbur Wrong" })
  CREATE (s1)-[:FOUGHT]->(s2)
 $$) AS (result1 agtype);




SELECT * FROM  
cypher('knowledge', $$
  CREATE (g:Group { name: "Innovators of Iniquity"  })
 $$) AS (result1 agtype);


SELECT * FROM  
cypher('knowledge', $$
  CREATE (g:Group { name: "Wrong Brothers", 
          tagline: "Fiends of Flight", based_in: "Dayton" } )
 $$) AS (result1 agtype);



SELECT * FROM  
cypher('knowledge', $$
  MATCH (g:Group { name: "Wrong Brothers" })
  MATCH (s:Super { name: "Wilbur Wrong" })
  CREATE (g)-[:INCLUDES]->(s)
 $$) AS (result1 agtype);


SELECT * FROM  
cypher('knowledge', $$
  MATCH (g:Group { name: "Wrong Brothers" })
  MATCH (s:Super { name: "Orville Wrong" })
  CREATE (g)-[:INCLUDES]->(s)
 $$) AS (result1 agtype);

SELECT * FROM  
cypher('knowledge', $$
  MATCH (g:Group { name: "Innovators of Iniquity" })
  MATCH (s:Super { name: "Henry Fnord" })
  CREATE (g)-[:INCLUDES]->(s)
 $$) AS (result1 agtype);

SELECT * FROM  
cypher('knowledge', $$
  MATCH (g:Group { name: "Innovators of Iniquity" })
  MATCH (s:Super { name: "Nell Strongarm" })
  CREATE (g)-[:INCLUDES]->(s)
 $$) AS (result1 agtype);

SELECT * FROM  
cypher('knowledge', $$
  MATCH (g:Group { name: "Innovators of Iniquity" })
  MATCH (g2:Group { name: "Wrong Brothers" })
  CREATE (g)-[:INCLUDES]->(g2)
 $$) AS (result1 agtype);


SET search_path = "$user", public;










```

::: { .notes }
16-age-setup.sql
:::





## Query



```{ sql }
LOAD 'age';
SET search_path = ag_catalog, "$user", public;

SELECT * FROM  
cypher('knowledge', $$
  MATCH (g:Group { name: "Innovators of Iniquity"})
  MATCH (g)-[i:INCLUDES*1..]->(e)
  RETURN g, i, e
 $$) AS (g agtype, i agtype, e agtype);

```

::: { .notes }
17-membership-graph.sql
:::




# AGE-Viewer

    podman run --publish=3001:3001 docker.io/joefagan/incubator-age-viewer:latest

[localhost:3001](http://localhost:3001)

::: {.notes}

LOAD THIS BEFORE 

running in docker - must use ifconfig!

export PGPORT=5455
database name justice 

:::

## Query through viewer



```{ sql }
LOAD 'age';
SET search_path = ag_catalog, "$user", public;

SELECT * FROM  
cypher('knowledge', $$
  MATCH (g:Group { name: "Innovators of Iniquity"})
  MATCH (g)-[i:INCLUDES*1..]->(e)
  RETURN g, i, e
 $$) AS (g agtype, i agtype, e agtype);

```

::: { .notes }
18-membership-graph.sql
:::




-----

## Easy recursive search



```{ sql }
LOAD 'age';
SET search_path = ag_catalog, "$user", public;

SELECT * FROM  
cypher('knowledge', $$
  MATCH (s1:Super { name: "Captain Columbus"})
  MATCH (s1)-[a:ALLIED_WITH*1..2]-(s2:Super)
  RETURN s1, a, s2 
 $$) AS (result1 agtype, a agtype, s2 agtype);

```

::: { .notes }
19-friend-of-friend2.sql
:::




-----

## Enemy of my enemy 



```{ sql }
LOAD 'age';
SET search_path = ag_catalog, "$user", public;

SELECT * FROM  
cypher('knowledge', $$
  MATCH (s1:Super { name: "Captain Columbus"})
  MATCH (s1)-[f1:FOUGHT]-(v:Super)-[f2:FOUGHT]-(s2:Super)
  RETURN s1, f1, v, f2, s2 
 $$) AS (s1 agtype, f1 agtype, v agtype, f2 agtype, s2 agtype);


```

::: { .notes }
20-enemy-of-enemy.sql
:::



---

![Cardinal Virtue, the Redbird of Righteousness](img/cardinal-virtue.png){fig-alt="Cardinal Virtue" fig-align="center"}

---

![Ohio Gosaimasu, the Sandusky Samurai](img/o-go.png){fig-alt="Ohio Gosaimasu" fig-align="center"}

## SQLite?

[simple-graph](https://github.com/dpapathanasiou/simple-graph)

![](img/simple-graph.png){fig-alt="simple-graph" fig-align="center"}

## neo4j_fdw 

![](img/neo4j_fdw.png){fig-alt="neo4j_fdw" fig-align="center"}

## [So many FDWs](https://wiki.postgresql.org/wiki/Foreign_data_wrappers)

![](img/fdws.png){fig-alt="Foreign Data Wrappers" fig-align="center"}

## Review: non-relational PostgreSQL

|                       | Document          | Graph         |
|:----------------------|:------------------|:--------------|
| native                | json, jsonb types | recursive CTE |
| hosted                | FerretDB          | Apache AGE    |
| foreign data wrappers | mongo_fdw         | neo4j_fdw     |

## non-relational SQLite

|                       | Document       | Graph         |
|:----------------------|:---------------|:--------------|
| native                | JSON functions | recursive CTE |
| hosted                | FerretDB       | simple-graph  |
| foreign data wrappers |                |               |

## Go big 

|              |one machine|distributed  |
|--------------|-----------|-------------|
|in memory     |SQLite     |Apache Ignite|
|single file   |SQLite     |rqlite       |
|server-managed|PostgreSQL |CockroachDB  |


# Pandas / Jupyter



::: {.notes}

Reason the Mighty Rectangle prevails

:::

## Pandas and SQL 

[pandas.ipynb](demo/pandas.ipynb)

## Object-Relational Mappers



```{ py }
from models import Super, Power  
import sqlalchemy as sa 

engine = sa.create_engine(
    'postgresql://captcbus:forohio@localhost:5455/justice')
with sa.orm.Session(engine) as session:
    stmt = sa.select(Super).where(Super.align == 'hero')
    for super in session.execute(stmt).scalars():
        power_list = ', '.join(p.name for p in super.powers)
        print(f'{super.name} has {power_list}')
```

::: { .notes }
21-orm-qry.py
:::



## ORMs: the bad news 



```{ py }
from sqlalchemy.orm import DeclarativeBase, Mapped, mapped_column, relationship, MappedAsDataclass
from sqlalchemy import String, ForeignKey
from typing import Optional, List 

# class Base(MappedAsDataclass, DeclarativeBase):
class Base(DeclarativeBase):
    pass

class Super(Base):
    __tablename__ = "supers"

    id: Mapped[int] = mapped_column(primary_key=True)
    name: Mapped[str] = mapped_column(String)
    align: Mapped[str] = mapped_column(String)
    tagline: Mapped[str] = mapped_column(String)
    based_in: Mapped[str] = mapped_column(String)
    powers: Mapped[List["Power"]] = relationship(
        back_populates="hero"
    )

    def __str__(self):
        return self.nombre

class Power(Base):
    __tablename__ = "powers"

    id: Mapped[int] = mapped_column(primary_key=True)
    name: Mapped[str] = mapped_column(String)
    super_id: Mapped[int] = mapped_column(ForeignKey("supers.id"))
    hero: Mapped["Super"] = relationship(back_populates="powers",)

```

::: { .notes }
22-models.py
:::



## Reducing ORM labor

- Generate DDL from ORM definitions
- Reflection (`autoload_with`, `.reflect`) - Core, not ORM
- Dataclass integration

## Dataclass integration



```{ py }
from models import Super, Power  
import sqlalchemy as sa 
from pprint import pprint

engine = sa.create_engine(
    'postgresql://captcbus:forohio'
    '@localhost:5455/justice')
with sa.orm.Session(engine) as session:

    stmt = sa.select(Super).where(
        Super.name == 'Ohio Gosaimasu')
    pprint(session.execute(stmt).first()[0])
```

::: { .notes }
23-orm-dataclass.py
:::



## Query builders



```{ py }
import pypika as pk

supers, powers = pk.Tables('supers', 'powers')
print (pk.Query 
    .from_(supers) 
    .select(supers.star, powers.name)
    .where(supers.align == 'hero')
    .on(powers.super_id == supers.id)
    .join(powers) 
    .where(supers.name > 'M'))

```

::: { .notes }
24-query-builder.py


At the border between writing raw SQL and an ORM, consider a 
query builder.

SQL-based syntax (so, yes, another syntax to learn) - all the 
same concepts and keywords

SQL syntax is picky - this is more freeform and composable


:::


# Plain SQL 

Ask what it can do for you


## HugSQL / [PugSQL](https://pugsql.org/)

pugsql_queries/supers_by_power.py:



----



```{ py }
import pugsql

queries = pugsql.module('pugsql_queries/')
queries.connect(
    'postgresql://captcbus:forohio'
    '@localhost:5455/justice')
for row in queries.supers_by_power(power='%light'):
    print(row)

```

::: { .notes }
25-use-pugsql.py
:::



Also: HugSQL (Clojure), HugSQLx (Rust), hugsql.js

## Migrations: [Agnostic](https://agnostic.readthedocs.io)

    $ cat migrations/add_weaknesses.sql
    create table weaknesses (
        id serial primary key,
        super_id integer references supers (id),
        name text not null
    );

    $ agnostic -t postgres -u $PGUSER \
       -p $PGPASSWORD -d $PGDATABASE \
       -p $PGPORT migrate

::: {.notes}

Track database structure changes 
Associate them to commit in your VC history 

Not running this one live!

:::

## Transformations: [dbt](https://www.getdbt.com/)

![](img/dbt.png){fig-alt="dbt" fig-align="center"}

## Rich feature set

- Inheritance 
- Window functions
- Custom types 
- PL/everything stored procedures 

::: {.notes}

PostgreSQL only

:::

## Advanced SQL functions


![](img/trilobite.png){fig-alt="The Trilobite, the Caped Cambrian" fig-align="center"}

------------



```{ sql }
SELECT * FROM raw_locations;

```

::: { .notes }
26-raw-locations.sql
:::



----------



```{ sql }
SELECT
    city,
    string_to_array(
        loc_list, ', ')
FROM raw_locations;

```

::: { .notes }
27-raw-loc-to-array.sql
:::



-------------



```{ sql }
SELECT
    city,
    unnest(
        string_to_array(
            loc_list, ', '))
FROM raw_locations;

```

::: { .notes }
28-raw-loc-to-rows.sql
:::



## SIMILAR TO



```{ sql }
SELECT
    name,
    power
FROM supers_w_powers
WHERE
    power LIKE '%speed%'
    OR power LIKE '%strength%'
    OR power LIKE '%flight%'
ORDER BY power, name;

```

::: { .notes }
29-many-to-many-problem.sql
:::




----------------



```{ sql }
SELECT
    name,
    power
FROM supers_w_powers
WHERE power SIMILAR TO 
    '%(speed|strength|flight)%'
ORDER BY power, name;

```

::: { .notes }
30-similar-to.sql
:::



... or POSIX regular expressions 

::: {.notes}

LIKE OR... LIKE OR

Regexes, 

But you can think of them as multiple-like 

## DISTINCT ON




```{ sql }
select distinct on (based_in)
    name,
    based_in
from supers
order by based_in, name;

```

::: { .notes }
31-distinct-on.sql
:::



:::

# What about SQLite

Yes:

ORMs, Pandas, jupysql, PugSQL, Agnostic

No:

dbt, advanced SQL

::: {.notes}

No cute animal logo

But let's sing its praises anyway 

:::

## Simplicity 

- No server
- Python Standard Library support 

::: {.notes}

beloved for quick projects, demos, single-user apps

serverless: file format + libraries to access 

:::

## Smallness 

## [SQLite for Application Files](https://www.sqlite.org/appfileformat.html)

![](img/sqlite-app-file.png){fig-alt="Article titled: SQL as an Application File Format" fig-align="center"}

::: {.notes}

In fact, it's so simple that you can use it when
you weren't even thinking about using a database at all - you were just looking for 
a data storage file format.  Because it's an efficient and versatile format. 
There's a good discussion of that in the SQLite docs.

:::


## Simple != Weak 

```{dot}
digraph P {
    layout=dot
    "Data source" -> "SQLite"
    "SQLite" -> "reader 1"
    "SQLite" -> "reader 2"
    "SQLite" -> "reader 3"
    "SQLite" -> "reader 4"
    "SQLite" -> "reader 5"
}
```

::: {.notes}

Python "scripting" language?

large amounts OK 

lots of users / processes OK

Publish data, updated occasionally

lots of writers: not OK 

:::

## Baked data 

Simon Willison: [The Baked Data architectural pattern](https://simonwillison.net/2021/Jul/28/baked-data/)

![](img/baked-data.png){fig-alt="Baked Data article" fig-align="center"}

::: {.notes}

Simon Willison wrote this great article on cheaply and easily hosting an 
application if it relies on infrequently-updated data.  Just put that data 
in a single-file database like SQLite, and a cheap and basic real or virtual 
server can handle the dynamic part.

::: 

## Datasette 

[datasette data/supers.sqlite](http://localhost:8001/)

![](img/datasette-map.png){fig-alt="Datasette page with map" fig-align="center"}

::: {.notes}

Explore, visualize tool 

Plugins for leaflet, dashboards, 

Simple as SQLite itself

:::

## Datasette-lite 

[https://lite.datasette.io/?url=https://github.com
    /catherinedevlin/talks/blob/master
    /olf_2003/supers.sqlite](https://lite.datasette.io/?url=https://github.com/catherinedevlin/talks/blob/master/olf_2003/supers.sqlite)


::: {.notes}

blurring boundaries: PyIodide

Simon Willison did this with Datasette!

Why would I put this long ugly URL on my slide?

Only code!

I have never been this lazy in my life, and I love it!

:::

---

![](img/cardinal-virtue.png){fig-alt="Cardinal Virtue" fig-align="left" height=250}
![](img/captain-columbus.png){fig-alt="Captain Columbus" fig-align="center" height=250}
![](img/o-go.png){fig-alt="Ohio Gosaimasu" fig-align="right" height=250}


https://github.com/catherinedevlin/talks

@catherinedevlin@tech.lgbt